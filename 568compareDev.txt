diff --git a/src/main/java/com/coderscampus/cp/domain/Checkin.java b/src/main/java/com/coderscampus/cp/domain/Checkin.java
index d25692e..f418e4a 100644
--- a/src/main/java/com/coderscampus/cp/domain/Checkin.java
+++ b/src/main/java/com/coderscampus/cp/domain/Checkin.java
@@ -4,20 +4,21 @@ import java.time.Instant;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.coderscampus.cp.dto.CheckinDTO;
-import com.coderscampus.cp.dto.StudentDTO;
-import com.coderscampus.cp.service.StudentService;
-
-import jakarta.persistence.*;
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.Entity;
+import jakarta.persistence.FetchType;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.JoinColumn;
+import jakarta.persistence.ManyToOne;
+import jakarta.persistence.OneToMany;
 
 @Entity
 public class Checkin {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
-    @Column(nullable = false)
     private String uid;
     private Instant date;
     private Integer nextAssignment;
@@ -28,28 +29,11 @@ public class Checkin {
     private Student student;
     private Role role;
     private CodingType codingType;
-    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
-    private List<ActivityLog> activityLog = new ArrayList<>();
-
-    public Checkin() {
-        this.date = Instant.now();
-    }
-
-    public Checkin(String uid, List<ActivityLog> activityLog, Integer nextAssignment, Boolean blockers, String blockerDescription, Student student, Role role, CodingType codingType) {
-        this();
-        this.uid = uid;
-        this.activityLog = activityLog;
-        this.nextAssignment = nextAssignment;
-        this.blockers = blockers;
-        this.blockerDescription = blockerDescription;
-        this.student = student;
-        this.role = role;
-        this.codingType = codingType;
-    }
 
 
+    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
+    private List<ActivityLog> activityLog = new ArrayList<>();
 
-    
     // ID
     public Long getId() {
         return id;
@@ -69,10 +53,16 @@ public class Checkin {
     }
 
     // Date
+
+
     public Instant getDate() {
         return date;
     }
 
+    public void setDate(Instant date) {
+        this.date = date;
+    }
+
     // Assignment
     public Integer getNextAssignment() {
         return nextAssignment;
diff --git a/src/main/java/com/coderscampus/cp/dto/AuthObjectDTO.java b/src/main/java/com/coderscampus/cp/dto/AuthObjectDto.java
similarity index 97%
rename from src/main/java/com/coderscampus/cp/dto/AuthObjectDTO.java
rename to src/main/java/com/coderscampus/cp/dto/AuthObjectDto.java
index d2943f9..c834ce7 100644
--- a/src/main/java/com/coderscampus/cp/dto/AuthObjectDTO.java
+++ b/src/main/java/com/coderscampus/cp/dto/AuthObjectDto.java
@@ -1,6 +1,6 @@
 package com.coderscampus.cp.dto;
 
-public class AuthObjectDTO {
+public class AuthObjectDto {
     private String uid;
     private String displayName;
     //    DON NOT NEED FOR #512 TO WORK, BUT NICE TO HAVE
diff --git a/src/main/java/com/coderscampus/cp/dto/CheckinDTO.java b/src/main/java/com/coderscampus/cp/dto/CheckinDTO.java
deleted file mode 100644
index 4938b2c..0000000
--- a/src/main/java/com/coderscampus/cp/dto/CheckinDTO.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package com.coderscampus.cp.dto;
-
-import com.coderscampus.cp.domain.Checkin;
-import com.coderscampus.cp.domain.Student;
-
-import java.time.Instant;
-
-public class CheckinDTO {
-
-    private Long id;
-    private Instant date;
-    private Integer nextAssignment;
-    private Boolean blockers;
-    private String blockerDescription;
-    private Checkin.Role role;
-    private Checkin.CodingType codingType;
-    private Long studentId;
-
-    public CheckinDTO(Checkin checkin) {
-        super();
-        this.id = checkin.getId();
-        this.date = checkin.getDate();
-        this.nextAssignment = checkin.getNextAssignment();
-        this.blockers = checkin.getBlockers();
-        this.blockerDescription = checkin.getBlockerDescription();
-        this.role = checkin.getRole();
-        this.codingType = checkin.getCodingType();
-        this.studentId=checkin.getStudent().getId();
-    }
-    public CheckinDTO() {this(new Checkin());}
-
-    public Long getStudentId() {
-        return studentId;
-    }
-
-    public void setStudentId(Long studentId) {
-        this.studentId = studentId;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Instant getDate() {
-        return date;
-    }
-
-    public Integer getNextAssignment() {
-        return nextAssignment;
-    }
-
-    public void setNextAssignment(Integer nextAssignment) {
-        this.nextAssignment = nextAssignment;
-    }
-
-    public Boolean getBlockers() {
-        return blockers;
-    }
-
-    public void setBlockers(Boolean blockers) {
-        this.blockers = blockers;
-    }
-
-    public String getBlockerDescription() {
-        return blockerDescription;
-    }
-
-    public void setBlockerDescription(String blockerDescription) {
-        this.blockerDescription = blockerDescription;
-    }
-
-    public Checkin.Role getRole() {
-        return role;
-    }
-
-    public void setRole(Checkin.Role role) {
-        this.role = role;
-    }
-
-    public Checkin.CodingType getCodingType() {
-        return codingType;
-    }
-
-    public void setCodingType(Checkin.CodingType codingType) {
-        this.codingType = codingType;
-    }
-
-    @Override
-    public String toString() {
-        return "CheckinDTO{" +
-                "id=" + id +
-                ", date=" + date +
-                ", nextAssignment=" + nextAssignment +
-                ", blockers=" + blockers +
-                ", blockerDescription='" + blockerDescription + '\'' +
-                ", role=" + role +
-                ", codingType=" + codingType +
-                '}';
-    }
-}
diff --git a/src/main/java/com/coderscampus/cp/service/CheckinService.java b/src/main/java/com/coderscampus/cp/service/CheckinService.java
index 8bf2ae8..9eacba6 100644
--- a/src/main/java/com/coderscampus/cp/service/CheckinService.java
+++ b/src/main/java/com/coderscampus/cp/service/CheckinService.java
@@ -1,16 +1,17 @@
 package com.coderscampus.cp.service;
 
+import java.time.Instant;
+import java.util.Comparator;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
 import com.coderscampus.cp.domain.Checkin;
 import com.coderscampus.cp.domain.Student;
-import com.coderscampus.cp.dto.CheckinDTO;
 import com.coderscampus.cp.repository.CheckinRepository;
 import com.coderscampus.cp.repository.StudentRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-import java.util.Comparator;
-import java.util.List;
-import java.util.stream.Collectors;
 
 @Service
 public class CheckinService {
@@ -20,96 +21,44 @@ public class CheckinService {
 
     @Autowired
     private StudentRepository studentRepo;
-    
-	@Autowired 
-	private StudentService studentService;
-	
-    public CheckinDTO saveByUid(CheckinDTO checkinDTO, String uid) {
-        Checkin foundCheckin = null;
-        if (checkinDTO.getId() != null) {
-            foundCheckin = checkinRepo.findById(checkinDTO.getId()).orElse(null);
-        }
 
-        if (foundCheckin == null) {
-            foundCheckin = createCheckin(checkinDTO, uid);
-
-        } else {
-            foundCheckin.setNextAssignment(checkinDTO.getNextAssignment());
-            foundCheckin.setBlockers(checkinDTO.getBlockers());
-            foundCheckin.setBlockerDescription(checkinDTO.getBlockerDescription());
-            foundCheckin.setRole(checkinDTO.getRole());
-            foundCheckin.setCodingType(checkinDTO.getCodingType());
-            foundCheckin = checkinRepo.save(foundCheckin);
-        }
-        CheckinDTO returnCheckinDTO = new CheckinDTO(foundCheckin);
-
-        return returnCheckinDTO;
-    }
-private Checkin createCheckin(CheckinDTO checkinDTO, String uid) {
-
-    // Need a checkin object x
-    Checkin checkin = new Checkin();
-    // Need to validate that the uid matches the student and isnt bogus
-    Student student = studentService.findStudentByUid(uid);
-    // Student must have been instantiated there is no way can come in as null
-    if (student.getId() == checkinDTO.getStudentId()) {
-        // Set student inside the checkin as the actual student object
-
-        //
-
-        // Call all relevant setters
-        // please double check this still works i might have broke it all
-        setStudentFromUid(checkin, uid);
+    public Checkin saveByUid(Checkin checkin, String uid) {
+//        if (checkinRepo.findByUid(uid) == null) {
+//            checkin.setDate(Instant.now());
+//        }
+        setDateIfNull(checkin);
+        setStudentAndUid(checkin, uid);
         return checkinRepo.save(checkin);
     }
-    else {
-        return null;
-    }
 
-}
-    
-    
-    
-    private void setStudentFromUid(Checkin checkin, String uid) {
-    	// Debug uid and student from here 
+    private void setStudentAndUid(Checkin checkin, String uid) {
         Student student = studentRepo.findByUid(uid);
         if (student != null) {
             checkin.setStudent(student);
+            checkin.setUid(uid);
         }
     }
 
-    public List<CheckinDTO> findAll() {
-        return checkinRepo.findAll().stream()
-                .sorted(Comparator.comparing(Checkin::getDate)
-                .reversed())
-                .map(CheckinDTO::new)
-                .collect(Collectors.toList());
+    private void setDateIfNull(Checkin checkin) {
+        if (checkin.getDate() == null) {
+            checkin.setDate(Instant.now());
+        }
     }
 
-    public CheckinDTO findById(Long id, String uid) {
-        Checkin foundCheckin = checkinRepo.findById(id).orElse(null);
-        if (foundCheckin != null && foundCheckin.getUid().equals(uid)) {
-            CheckinDTO returnCheckinDTO = new CheckinDTO(foundCheckin);
-            return returnCheckinDTO;
-        }
-        return null;
+    public List<Checkin> findAll() {
+        return checkinRepo.findAll().stream().sorted(Comparator.comparing(Checkin::getDate).reversed()).collect(Collectors.toList());
     }
 
-    public void delete(CheckinDTO checkinDTO, String uid) {
-        Checkin foundCheckin = checkinRepo.findById(checkinDTO.getId()).orElse(null);
-        if (foundCheckin != null && foundCheckin.getUid().equals(uid)) {
-            checkinRepo.delete(foundCheckin);
-        }
+    public Checkin findById(Long id) {
+        return checkinRepo.findById(id).get();
     }
 
-    public List<CheckinDTO> findByUid(String uid) {
-        List<Checkin> checkins = checkinRepo.findByUid(uid).stream()
-                .sorted(Comparator.comparing(Checkin::getDate)
-                .reversed())
-                .collect(Collectors.toList());
-        return checkins.stream()
-                .map(CheckinDTO::new)
-                .collect(Collectors.toList());
+    public void delete(Checkin checkin) {
+        checkinRepo.delete(checkin);
+    }
 
+    public List<Checkin> findByUid(String uid) {
+        return checkinRepo.findByUid(uid).stream().sorted(Comparator.comparing(Checkin::getDate).reversed()).collect(Collectors.toList());
     }
 }
+
diff --git a/src/main/java/com/coderscampus/cp/service/StudentService.java b/src/main/java/com/coderscampus/cp/service/StudentService.java
index e8895da..aa66c38 100644
--- a/src/main/java/com/coderscampus/cp/service/StudentService.java
+++ b/src/main/java/com/coderscampus/cp/service/StudentService.java
@@ -27,7 +27,6 @@ public class StudentService {
             studentRepo.save(student);
         }
     }
-
     @Transactional
     public StudentDTO saveByUid(StudentDTO studentDTO, String uid) {
         Student foundStudent = studentRepo.findByUid(uid);
@@ -35,26 +34,19 @@ public class StudentService {
             Student student = new Student(studentDTO, uid);
             student.setUid(uid);
             foundStudent = studentRepo.save(student);
-
-        } else {
+        } else if (foundStudent != null) {
             foundStudent.setName(studentDTO.getName());
             foundStudent.setAssignmentNum(studentDTO.getAssignmentNum());
             foundStudent.setIde(studentDTO.getIde());
             foundStudent.setWillingToMentor(studentDTO.getWillingToMentor());
             foundStudent.setMentee(studentDTO.getMentee());
             foundStudent = studentRepo.save(foundStudent);
-
+            
         }
         StudentDTO returnStudent = new StudentDTO(foundStudent);
         return returnStudent;
     }
 
-    @Transactional
-    public Student findStudentByUid(String uid) {
-        Student foundStudent = studentRepo.findByUid(uid);
-    	return foundStudent;
-    }
-    
     boolean doesStudentExistInRepository(Student student) {
         Optional<Student> existingStudent = studentRepo.findById(student.getId());
 
@@ -100,5 +92,5 @@ public class StudentService {
         Student student = studentRepo.findByUid(uid);
         return new StudentDTO(student);
     }
-
+    
 }
diff --git a/src/main/java/com/coderscampus/cp/web/CheckinController.java b/src/main/java/com/coderscampus/cp/web/CheckinController.java
index c1e2afa..ef03888 100644
--- a/src/main/java/com/coderscampus/cp/web/CheckinController.java
+++ b/src/main/java/com/coderscampus/cp/web/CheckinController.java
@@ -2,7 +2,6 @@ package com.coderscampus.cp.web;
 
 import java.util.List;
 
-import com.coderscampus.cp.dto.CheckinDTO;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.ModelMap;
@@ -29,7 +28,7 @@ public class CheckinController {
     @GetMapping("/")
     public String home(ModelMap model, HttpSession httpSession) {
         String uid = (String) httpSession.getAttribute("uid");
-        List<CheckinDTO> checkins = checkinService.findByUid(uid);
+        List<Checkin> checkins = checkinService.findByUid(uid);
         model.put("checkins", checkins);
         model.addAttribute("pageTitle", "Checkin Read");
         model.put("isCheckin", true);
@@ -46,16 +45,15 @@ public class CheckinController {
     }
 
     @PostMapping("/create")
-    public String create(CheckinDTO checkinDTO, @RequestParam("uid") String uid) {
-        checkinDTO = checkinService.saveByUid(checkinDTO, uid);
+    public String create(Checkin checkin, @RequestParam("uid") String uid) {
+        checkin = checkinService.saveByUid(checkin, uid);
         return "redirect:/checkin/";
     }
 
     @GetMapping("/update/{id}")
-    public String fetch(ModelMap model, @PathVariable Long id, @RequestParam("uid") String uid) {
-        System.out.println("**** This is the u-i-d!" + uid);
-        CheckinDTO checkinDTO = checkinService.findById(id, uid);
-        model.put("checkin", checkinDTO);
+    public String fetch(ModelMap model, @PathVariable Long id) {
+        Checkin checkin = checkinService.findById(id);
+        model.put("checkin", checkin);
         ActivityLog activityLog = new ActivityLog();
         model.put("activityLog", activityLog);
         model.addAttribute("pageTitle", "Checkin Update");
@@ -70,15 +68,14 @@ public class CheckinController {
     }
 
     @PostMapping("/update")
-    //TODO: refactor this by using checkinDTO
-    public String update(CheckinDTO checkinDTO, @RequestParam("uid") String uid) {
-        checkinService.saveByUid(checkinDTO, uid);
+    public String update(Checkin checkin, @RequestParam("uid") String uid) {
+        checkinService.saveByUid(checkin, uid);
         return "redirect:/checkin/";
     }
 
     @PostMapping("/delete")
-    public String delete(CheckinDTO checkinDTO, @RequestParam("uid") String uid) {
-        checkinService.delete(checkinDTO, uid);
+    public String delete(Checkin checkin) {
+        checkinService.delete(checkin);
         return "redirect:/checkin/";
     }
 
diff --git a/src/main/java/com/coderscampus/cp/web/SpringProjectController.java b/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
index cd1ace6..099a83a 100644
--- a/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
+++ b/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
@@ -12,7 +12,7 @@ import org.springframework.web.bind.annotation.ResponseBody;
 
 import com.coderscampus.cp.domain.SpringProject;
 import com.coderscampus.cp.domain.Student;
-import com.coderscampus.cp.dto.AuthObjectDTO;
+import com.coderscampus.cp.dto.AuthObjectDto;
 import com.coderscampus.cp.repository.SpringProjectRepository;
 import com.coderscampus.cp.service.CheckinService;
 import com.coderscampus.cp.service.StudentService;
@@ -45,7 +45,7 @@ public class SpringProjectController {
 
     @PostMapping("/send-oauth")
     @ResponseBody
-    public String getOauth(@RequestBody AuthObjectDTO authDto,
+    public String getOauth(@RequestBody AuthObjectDto authDto,
                            HttpSession httpSession) {
         if (authDto != null) {
             httpSession.setAttribute("uid", authDto.getUid());
diff --git a/src/test/java/com/coderscampus/cp/domain/CheckinTest.java b/src/test/java/com/coderscampus/cp/domain/CheckinTest.java
deleted file mode 100644
index 834f0b6..0000000
--- a/src/test/java/com/coderscampus/cp/domain/CheckinTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.coderscampus.cp.domain;
-
-import com.coderscampus.cp.dto.CheckinDTO;
-import com.coderscampus.cp.repository.StudentRepository;
-import com.coderscampus.cp.service.CheckinService;
-import com.coderscampus.cp.service.StudentService;
-import jakarta.transaction.Transactional;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-
-import java.util.UUID;
-
-import static org.junit.jupiter.api.Assertions.*;
-@SpringBootTest
-class CheckinTest {
-
-    @Autowired
-    private StudentService studentService;
-    @Autowired
-    private StudentRepository studentRepo;
-    @Autowired
-    private CheckinService checkinService;
-
-    @Test
-    @Transactional
-    //this tests the constructor that takes 2 parameters, a checkinDTO and a UID
-    //should fail if studentUID does not match UID handed in separate parameter
-    void testCheckinDTO_UIDConstructor() {
-        String uid = UUID.randomUUID().toString();
-        Student existingStudent = new Student(uid, "Bobby", 17, "IntelliJ", false, "name", null); // Creates hypothetical existing student
-        existingStudent = studentRepo.save(existingStudent); // Saves that existing student to the database
-//        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", existingStudent, Checkin.Role.CODER,
-//                Checkin.CodingType.CRUD);
-        CheckinDTO checkinDTO1 = new CheckinDTO();
-        //setting the values
-        checkinDTO1.setNextAssignment(9);
-        checkinDTO1.setBlockers(true);
-        checkinDTO1.setBlockerDescription("assginment 10");
-        checkinDTO1.setRole(Checkin.Role.CODER);
-        checkinDTO1.setCodingType(Checkin.CodingType.CODE_REVIEW);
-        checkinDTO1.setStudentId(existingStudent.getId());
-        Checkin checkin = new Checkin(checkinDTO1, uid);
-        assertNotNull(checkin.getStudent());
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/com/coderscampus/cp/repository/CheckinRepositoryTest.java b/src/test/java/com/coderscampus/cp/repository/CheckinRepositoryTest.java
deleted file mode 100644
index 2e87fc9..0000000
--- a/src/test/java/com/coderscampus/cp/repository/CheckinRepositoryTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.coderscampus.cp.repository;
-
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-
-import java.util.UUID;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-
-import com.coderscampus.cp.domain.Checkin;
-import com.coderscampus.cp.domain.Student;
-import com.coderscampus.cp.service.CheckinService;
-import com.coderscampus.cp.service.StudentService;
-
-import jakarta.transaction.Transactional;
-
-@SpringBootTest
-class CheckinRepositoryTest {
-
-	@Autowired
-	private StudentService studentService;
-	@Autowired
-	private StudentRepository studentRepo;
-	
-	@Autowired
-	private CheckinService checkinService;
-	@Autowired
-	private CheckinRepository checkinRepo;
-
-	@Test
-	@Transactional
-	void testSave() {
-		//Create UID
-        String uid = UUID.randomUUID().toString();
-        //Create new student with new UID
-        Student student = new Student(uid, "Bobby", 12, "IntelliJ", false, "name", null);
-        //Save the student
-        studentRepo.save(student);
-        //Create new checkin
-        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", student, Checkin.Role.CODER, Checkin.CodingType.CRUD);
-        //Save checkin
-        checkinRepo.save(checkin);
-        Checkin checkin2 = checkinRepo.findById(checkin.getId()).get();
-        assertNotNull(checkin2);
-	}
-
-}
diff --git a/src/test/java/com/coderscampus/cp/service/CheckinServiceTest.java b/src/test/java/com/coderscampus/cp/service/CheckinServiceTest.java
index e2a8c6d..d576c43 100644
--- a/src/test/java/com/coderscampus/cp/service/CheckinServiceTest.java
+++ b/src/test/java/com/coderscampus/cp/service/CheckinServiceTest.java
@@ -2,244 +2,55 @@ package com.coderscampus.cp.service;
 
 import com.coderscampus.cp.domain.Checkin;
 import com.coderscampus.cp.domain.Student;
-import com.coderscampus.cp.dto.CheckinDTO;
 import com.coderscampus.cp.repository.CheckinRepository;
 import com.coderscampus.cp.repository.StudentRepository;
-import jakarta.transaction.Transactional;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
-import java.util.List;
-import java.util.UUID;
+import java.lang.reflect.Method;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.when;
 
-@SpringBootTest
+@ExtendWith(MockitoExtension.class)
 public class CheckinServiceTest {
+    @Mock
+    private CheckinRepository checkinRepo;
 
-    @Autowired
-    private StudentService studentService;
-    @Autowired
+    @Mock
     private StudentRepository studentRepo;
 
-    @Autowired
+    @InjectMocks
     private CheckinService checkinService;
-    @Autowired
-    private CheckinRepository checkinRepo;
 
-    //    Consider for later, more streamlined
-    @BeforeEach
-    void cleanUpData() {
-        checkinRepo.deleteAll();
-        studentRepo.deleteAll();
-    }
 
     @Test
-    @Transactional
-    void testDeleteCheckin() {
-        // Create UID
-        String uid = UUID.randomUUID().toString();
-        // Create new student with new UID
-        Student student = new Student(uid, "Bobby", 12, "IntelliJ", false, "name", null);
-        // Save the student
-        studentRepo.save(student);
-        // Create new checkin
-        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        // Save checkin
-        // Instantiate a checkin DTO from a new checkin
-        CheckinDTO checkinDTO = checkinService.saveByUid(new CheckinDTO(checkin), uid);
+    public void testSetStudentAndUid() throws Exception {
+        // Create a sample Checkin object
+        Checkin checkin = new Checkin();
 
-        // Create second checkin object from checkin DTO
-        Checkin foundCheckin = new Checkin(checkinDTO, uid);
-        // Confirm existence of second checkin in database
-        assertTrue(checkinRepo.findById(foundCheckin.getId()).isPresent());
-        // Delete second checkin
-        checkinRepo.delete(foundCheckin);
-        // Confirm deletion from database
-        assertFalse(checkinRepo.findById(foundCheckin.getId()).isPresent());
-        // Clean up by deleting student from database
-        studentRepo.delete(student);
-    }
+        // Create a sample Student object
+        Student student = new Student();
+        String uid = "sGvKUXo0M4PgKMoPC73fdSrM6659";
+        student.setUid(uid);
 
-    @Test
-    @Transactional
-    void testSaveByUid() {
-        // Create UID
-        String uid = UUID.randomUUID().toString();
-        // Create new student with new UID
-        Student student = new Student(uid, "Bobby", 12, "IntelliJ", false, "name", null);
-        // Save the student
-        studentRepo.save(student);
-        // Create new checkin
-        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        // Save checkin
-        // Instantiate a checkin DTO from a new checkin
+        // Mock the behavior of the studentRepo.findByUid() method
+        when(studentRepo.findByUid(uid)).thenReturn(student);
 
-        CheckinDTO checkinDTO = checkinService.saveByUid(new CheckinDTO(checkin), uid);
+        // Use reflection to access the private method
+        Method setStudentAndUidMethod = CheckinService.class.getDeclaredMethod("setStudentAndUid", Checkin.class, String.class);
+        setStudentAndUidMethod.setAccessible(true);
 
-        // Create second checkin object from checkin DTO
-        Checkin foundCheckin = new Checkin(checkinDTO, uid);
-        // Confirm existence of second checkin in database
-        assertTrue(checkinRepo.findById(foundCheckin.getId()).isPresent());
-        // Change all relevant (non-id, uid, and creation date) fields in checkin
-        checkinDTO.setBlockers(false);
-        checkinDTO.setRole(Checkin.Role.OBSERVER);
-        checkinDTO.setBlockerDescription("Blep");
-        checkinDTO.setCodingType(Checkin.CodingType.CODE_REVIEW);
-        checkinDTO.setNextAssignment(11);
-        // Save by uid against the change
-        checkinService.saveByUid(checkinDTO, uid);
-        // Get the changed record
-        List<CheckinDTO> checkinList = checkinService.findByUid(uid);
-        CheckinDTO changedCheckin = null;
-        for (CheckinDTO checkin1 : checkinList) {
-            if (checkinDTO.getId().equals(checkin1.getId())) {
-                changedCheckin = checkin1;
-            }
-        }
-        // verify that all fields changed
-        assertEquals(false, changedCheckin.getBlockers());
-        assertEquals("Blep", changedCheckin.getBlockerDescription());
-        assertEquals(11, changedCheckin.getNextAssignment());
-        assertEquals(Checkin.Role.OBSERVER, changedCheckin.getRole());
-        assertEquals(Checkin.CodingType.CODE_REVIEW, changedCheckin.getCodingType());
-        // Delete second checkin
+        // Invoke the private method using reflection
+        setStudentAndUidMethod.invoke(checkinService, checkin, uid);
 
-        checkinService.delete(checkinDTO, uid);
-        // Confirm deletion from database
-        assertFalse(checkinRepo.findById(changedCheckin.getId()).isPresent());
-        // Clean up by deleting student from database
-        studentRepo.delete(student);
+        // Verify that the student and UID are set correctly
+        assertEquals(student, checkin.getStudent());
+        assertEquals(uid, checkin.getUid());
     }
 
-    @Test
-    @Transactional
-    void testFindByUid() {
-        // Create UID
-        String uid = UUID.randomUUID().toString();
-        // Create new student with new UID
-        Student student = new Student(uid, "Bobby", 12, "IntelliJ", false, "name", null);
-        // Save the student
-        studentRepo.save(student);
-//        studentRepo.save(student2);
-        // Create new checkin
-        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        Checkin checkin2 = new Checkin(uid, null, 11, true, "assignment10", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        // Save checkin
-        CheckinDTO checkinDTO1 = checkinService.saveByUid(new CheckinDTO(checkin), uid);
-        CheckinDTO checkinDTO2 = checkinService.saveByUid(new CheckinDTO(checkin2), uid);
-//
-        List<CheckinDTO> checkinDTOs = checkinService.findByUid(uid);
-        // since using checkinService.findByUid in prev tests, index is not starting at 0
-        // could use streams or arrraylist to have better looking code but it gets job done
-        String ids = "";
-        for (CheckinDTO checkinDTO : checkinDTOs) {
-            ids = ids + checkinDTO.getId();
-        }
-        assertTrue(ids.contains("" + checkinDTO1.getId()));
-        assertEquals(2, checkinDTOs.size());
-
-        String assignment = "";
-        for (CheckinDTO checkinDTO : checkinDTOs) {
-            assignment = assignment + checkinDTO.getNextAssignment();
-        }
-        assertTrue(assignment.contains("" + checkinDTO1.getNextAssignment()));
-
-        String assignment2 = "";
-        for (CheckinDTO checkinDTO : checkinDTOs) {
-            assignment2 = assignment2 + checkinDTO.getNextAssignment();
-        }
-        assertTrue(assignment.contains("" + checkinDTO2.getNextAssignment()));
-    }
-
-    @Test
-    @Transactional
-//    This will fail if "spring.jpa.hibernate.ddl-auto=create-drop" is changed in application.properties
-    void testFindAll(){
-//        Create 2 new students
-        String uid1 = UUID.randomUUID().toString();
-        String uid2 = UUID.randomUUID().toString();
-        // Create new student with new UID
-        Student student1 = new Student(uid1, "Bobby", 12, "IntelliJ", false, "name", null);
-        Student student2 = new Student(uid2, "Fred", 12, "IntelliJ", false, "name", null);
-//        Save students
-        studentRepo.save(student1);
-        studentRepo.save(student2);
-//        Create 2 new checkins for each student
-        Checkin checkin1 = new Checkin(uid1, null, 9, true, "assignment9", student1, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        Checkin checkin2 = new Checkin(uid1, null, 12, true, "assignment10", student1, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        Checkin checkin3 = new Checkin(uid2, null, 13, true, "assignment9", student2, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        Checkin checkin4 = new Checkin(uid2, null, 14, true, "assignment10", student2, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-//        Save the checkins
-        CheckinDTO checkinDTO1 = checkinService.saveByUid(new CheckinDTO(checkin1), uid1);
-        CheckinDTO checkinDTO2 = checkinService.saveByUid(new CheckinDTO(checkin2), uid1);
-        CheckinDTO checkinDTO3 = checkinService.saveByUid(new CheckinDTO(checkin3), uid2);
-        CheckinDTO checkinDTO4 = checkinService.saveByUid(new CheckinDTO(checkin4), uid2);
-//        call findAll()
-        List<CheckinDTO> checkinDTOs = checkinService.findAll();
-//        Assert that the size is correct
-        String ids = "";
-        for (CheckinDTO checkinDTO : checkinDTOs) {
-            ids = ids + checkinDTO.getId();
-        }
-        assertTrue(ids.contains("" + checkinDTO1.getId()));
-        assertTrue(ids.contains("" + checkinDTO2.getId()));
-        assertTrue(ids.contains("" + checkinDTO3.getId()));
-        assertTrue(ids.contains("" + checkinDTO4.getId()));
-        assertEquals(4, checkinDTOs.size());
-//        keep testing properties of checkins
-        String assignment1 = "";
-        String assignment2 = "";
-        String assignment3 = "";
-        String assignment4 = "";
-        for (CheckinDTO checkinDTO : checkinDTOs) {
-            assignment4 = assignment4 + checkinDTO.getNextAssignment();
-            assignment3 = assignment3 + checkinDTO.getNextAssignment();
-            assignment2 = assignment2 + checkinDTO.getNextAssignment();
-            assignment1 = assignment1 + checkinDTO.getNextAssignment();
-        }
-
-        assertTrue(assignment1.contains("" + checkinDTO1.getNextAssignment()));
-        assertTrue(assignment2.contains("" + checkinDTO2.getNextAssignment()));
-        assertTrue(assignment3.contains("" + checkinDTO3.getNextAssignment()));
-        assertTrue(assignment4.contains("" + checkinDTO4.getNextAssignment()));
-    }
-    @Test
-    @Transactional
-    void testFindById() {
-        // Create UID
-        String uid = UUID.randomUUID().toString();
-        // Create new student with new UID
-        Student student = new Student(uid, "Bobby", 12, "IntelliJ", false, "name", null);
-        // Save the student
-        studentRepo.save(student);
-        assertNotNull(student.getId());
-        // Create new checkin
-        Checkin checkin = new Checkin(uid, null, 9, true, "assignment9", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        Checkin checkin2 = new Checkin(uid, null, 11, true, "assignment10", student, Checkin.Role.CODER,
-                Checkin.CodingType.CRUD);
-        // Save checkin
-        CheckinDTO checkinDTO1 = checkinService.saveByUid(new CheckinDTO(checkin), uid);
-        CheckinDTO checkinDTO2 = checkinService.saveByUid(new CheckinDTO(checkin2), uid);
-        // Check find by id
-        CheckinDTO foundCheckinDTO = checkinService.findById(checkinDTO1.getId(), uid);
-        assertEquals("assignment9", foundCheckinDTO.getBlockerDescription());
-        CheckinDTO foundCheckinDTO2 = checkinService.findById(checkinDTO2.getId(), uid);
-        assertEquals("assignment10", foundCheckinDTO2.getBlockerDescription());
-    }
-
-}
-	
-
 
+}
\ No newline at end of file
diff --git a/src/test/java/com/coderscampus/cp/service/MockCheckinServiceTest.java b/src/test/java/com/coderscampus/cp/service/MockCheckinServiceTest.java
deleted file mode 100644
index 8fda245..0000000
--- a/src/test/java/com/coderscampus/cp/service/MockCheckinServiceTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.coderscampus.cp.service;
-
-import com.coderscampus.cp.domain.Checkin;
-import com.coderscampus.cp.domain.Student;
-import com.coderscampus.cp.repository.CheckinRepository;
-import com.coderscampus.cp.repository.StudentRepository;
-import net.minidev.json.JSONUtil;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.lang.reflect.Method;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-public class MockCheckinServiceTest {
-    @Mock
-    private CheckinRepository checkinRepo;
-
-    @Mock
-    private StudentRepository studentRepo;
-
-    @InjectMocks
-    private CheckinService checkinService;
-
-
-
-    @Test
-    public void testSetStudentAndUid() throws Exception {
-        // Create a sample Checkin object
-        Checkin checkin = new Checkin();
-
-        // Create a sample Student object
-        Student student = new Student();
-        String uid = "sGvKUXo0M4PgKMoPC73fdSrM6659";
-        student.setUid(uid);
-
-        // Mock the behavior of the studentRepo.findByUid() method
-        when(studentRepo.findByUid(uid)).thenReturn(student);
-
-        // Use reflection to access the private method
-        Method setStudentAndUidMethod = CheckinService.class.getDeclaredMethod("setStudentAndUid", Checkin.class, String.class);
-        setStudentAndUidMethod.setAccessible(true);
-
-        // Invoke the private method using reflection
-        setStudentAndUidMethod.invoke(checkinService, checkin, uid);
-
-        // Verify that the student and UID are set correctly
-        assertEquals(student, checkin.getStudent());
-        assertEquals(uid, checkin.getUid());
-    }
-
-
-}
\ No newline at end of file
diff --git a/src/test/java/com/coderscampus/cp/service/StudentServiceTest.java b/src/test/java/com/coderscampus/cp/service/StudentServiceTest.java
index a4f70e1..fa6b07e 100644
--- a/src/test/java/com/coderscampus/cp/service/StudentServiceTest.java
+++ b/src/test/java/com/coderscampus/cp/service/StudentServiceTest.java
@@ -28,8 +28,8 @@ class StudentServiceTest {
 	void testIsValidStudentUpdate() {
 //        Creating a test to verify we're able to create and access students without sending the UID to front end for security reasons
 		String uid = UUID.randomUUID().toString();
-        Student existingStudent = new Student(uid, "Bobby", 17, "IntelliJ", false, "name", null); // Creates hypothetical existing student
-        existingStudent = studentRepo.save(existingStudent); // Saves that existing student to the database
+		Student existingStudent = new Student(uid, "Bobby", 17, "IntelliJ", false, "name", null); // Creates hypothetical existing student
+		existingStudent = studentRepo.save(existingStudent); // Saves that existing student to the database
         StudentDTO studentDTO = new StudentDTO(existingStudent); // Sends studentDTO to the front-end because it does not have a Uid
         studentDTO.setName("Lucas");
         studentDTO.setAssignmentNum(12);
