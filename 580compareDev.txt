diff --git a/src/main/java/com/coderscampus/cp/service/StudentService.java b/src/main/java/com/coderscampus/cp/service/StudentService.java
index 182ccbb..aa66c38 100644
--- a/src/main/java/com/coderscampus/cp/service/StudentService.java
+++ b/src/main/java/com/coderscampus/cp/service/StudentService.java
@@ -1,14 +1,17 @@
 package com.coderscampus.cp.service;
 
+import java.util.Optional;
+
+import javax.management.RuntimeErrorException;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
 import com.coderscampus.cp.domain.Student;
 import com.coderscampus.cp.dto.StudentDTO;
 import com.coderscampus.cp.repository.StudentRepository;
-import jakarta.transaction.Transactional;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
 
-import javax.management.RuntimeErrorException;
-import java.util.Optional;
+import jakarta.transaction.Transactional;
 
 @Service
 public class StudentService {
@@ -24,12 +27,11 @@ public class StudentService {
             studentRepo.save(student);
         }
     }
-
     @Transactional
     public StudentDTO saveByUid(StudentDTO studentDTO, String uid) {
         Student foundStudent = studentRepo.findByUid(uid);
         if (foundStudent == null) {
-            Student student = new Student();
+            Student student = new Student(studentDTO, uid);
             student.setUid(uid);
             foundStudent = studentRepo.save(student);
         } else if (foundStudent != null) {
@@ -39,7 +41,7 @@ public class StudentService {
             foundStudent.setWillingToMentor(studentDTO.getWillingToMentor());
             foundStudent.setMentee(studentDTO.getMentee());
             foundStudent = studentRepo.save(foundStudent);
-
+            
         }
         StudentDTO returnStudent = new StudentDTO(foundStudent);
         return returnStudent;
@@ -88,11 +90,7 @@ public class StudentService {
 
     public StudentDTO findByUid(String uid) {
         Student student = studentRepo.findByUid(uid);
-        if (student != null) {
-            return new StudentDTO(student);
-        } else {
-            return null;
-        }
+        return new StudentDTO(student);
     }
-
+    
 }
diff --git a/src/main/java/com/coderscampus/cp/web/SpringProjectController.java b/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
index c829f24..099a83a 100644
--- a/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
+++ b/src/main/java/com/coderscampus/cp/web/SpringProjectController.java
@@ -13,7 +13,6 @@ import org.springframework.web.bind.annotation.ResponseBody;
 import com.coderscampus.cp.domain.SpringProject;
 import com.coderscampus.cp.domain.Student;
 import com.coderscampus.cp.dto.AuthObjectDto;
-import com.coderscampus.cp.dto.StudentDTO;
 import com.coderscampus.cp.repository.SpringProjectRepository;
 import com.coderscampus.cp.service.CheckinService;
 import com.coderscampus.cp.service.StudentService;
@@ -37,15 +36,11 @@ public class SpringProjectController {
     public String getDashboard(ModelMap model, HttpSession httpSession) {
         String uid = (String) httpSession.getAttribute("uid");
         String displayName = (String) httpSession.getAttribute("displayName");
-        StudentDTO foundStudent = studentService.findByUid(uid);
-        // if student can be found by Uid
-        if (foundStudent == null) {
-            // then student = foundStudent
-            foundStudent = studentService.saveByUid(foundStudent, uid);
-        }
-        model.put("studentDTO", foundStudent); // change to studentDTO
-        System.out.println("FFFF"+ foundStudent);
-        return "dashboard"; // Don't need redirect to checkin. Later on we will bring checkin activities to dashboard
+//        Checkin checkin = new Checkin();
+//        checkin = checkinService.saveByUid(checkin, uid);
+        Student student = new Student();
+        model.put("student", student);
+        return "dashboard";
     }
 
     @PostMapping("/send-oauth")
diff --git a/src/main/java/com/coderscampus/cp/web/StudentController.java b/src/main/java/com/coderscampus/cp/web/StudentController.java
index fee1fe7..a20698c 100644
--- a/src/main/java/com/coderscampus/cp/web/StudentController.java
+++ b/src/main/java/com/coderscampus/cp/web/StudentController.java
@@ -39,9 +39,9 @@ public class StudentController {
 
 
 
-    @PostMapping("/create") //Once moved, we can delete this endpoint
+    @PostMapping("/create")
     public String create(StudentDTO student, @RequestParam("uid") String uid) {
-        studentService.saveByUid(student, uid); //Move this line to SpringProjectController root mapping to create student upon page arrival
+        studentService.saveByUid(student, uid);
         return "redirect:/student/";
     }
 
diff --git a/src/test/java/com/coderscampus/cp/web/SpringProjectControllerTest.java b/src/test/java/com/coderscampus/cp/web/SpringProjectControllerTest.java
deleted file mode 100644
index c28567f..0000000
--- a/src/test/java/com/coderscampus/cp/web/SpringProjectControllerTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.coderscampus.cp.web;
-
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-
-
-class SpringProjectControllerTest {
-
-    @Test
-    void getDashboard() {
-//        Land on root
-//        Forced google login
-//          (Maybe test for login showing?)
-//        Automatically create student in background if not existing
-//          Test if login provider gives enough detail to create user with
-//          Test if Student and StudentDTO were created
-//          Test if Student created is same as Student info provided by login provider
-//          Test to make sure server never sends back UID
-//        Implicit that page itself never shows (Load in visual-esque)
-//        Show contents of checkin/read
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/com/coderscampus/cp/web/StudentControllerTest.java b/src/test/java/com/coderscampus/cp/web/StudentControllerTest.java
index e930fd0..cf4d6e4 100644
--- a/src/test/java/com/coderscampus/cp/web/StudentControllerTest.java
+++ b/src/test/java/com/coderscampus/cp/web/StudentControllerTest.java
@@ -1,5 +1,4 @@
 package com.coderscampus.cp.web;
-import com.coderscampus.cp.dto.AuthObjectDto;
 import com.coderscampus.cp.dto.StudentDTO;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -7,14 +6,12 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
-import org.springframework.mock.web.MockHttpSession;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 import org.springframework.test.web.servlet.MockMvc;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import java.util.UUID;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 
 @ExtendWith(SpringExtension.class)
@@ -29,66 +26,18 @@ public class StudentControllerTest {
     private ObjectMapper objectMapper;
 
 
-//    @Test
-//    public void testGetCreate() throws Exception {
-//        StudentDTO student = new StudentDTO();
-//        student.setName("bobby");
-//        String uid = UUID.randomUUID().toString();
-//
-//
-//        mockMvc.perform(post("/create")
-//                        .contentType(MediaType.APPLICATION_JSON)
-//                        .content(objectMapper.writeValueAsString(student))
-//                        .param("uid", uid))
-//                .andExpect(status().isOk());
-//    }
-
-
     @Test
-    public void should_authenticate_user () throws Exception {
-        AuthObjectDto authObjectDto = new AuthObjectDto();
-        authObjectDto.setDisplayName("test_user");
-        authObjectDto.setUid("test_uid");
-
-        MockHttpSession httpSession = new MockHttpSession();
-        mockMvc.perform(post("/send-oauth")
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(convertObjectToJsonString(authObjectDto))
-                        .session(httpSession)
-                        .sessionAttr("uid", "test_uid")
-                                .sessionAttr("displayName", "test_user")
-                )
+    public void testGetCreate() throws Exception {
+        StudentDTO student = new StudentDTO();
+        student.setName("bobby");
+        String uid = UUID.randomUUID().toString();
 
 
+        mockMvc.perform(post("/create")
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(objectMapper.writeValueAsString(student))
+                        .param("uid", uid))
                 .andExpect(status().isOk());
-
-
-        assertEquals("test_uid", httpSession.getAttribute("uid"));
-        assertEquals("test_user", httpSession.getAttribute("displayName"));
-
-
     }
 
-    @Test
-    public void should_not_authenticate_user () throws Exception {
-            mockMvc.perform(post("/send-oauth")
-                    .contentType(MediaType.APPLICATION_JSON)
-                    .content(convertObjectToJsonString(null)))
-                    .andExpect(status().isBadRequest());
-    }
-
-
-    private static String convertObjectToJsonString(Object object) {
-         ObjectMapper objectMapper = new ObjectMapper();
-        try {
-           return objectMapper.writeValueAsString(object);
-        }catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-
-    }
-
-
-
-
 }
